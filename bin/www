#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app')
// var debug = require('debug')('latincard:server')
// var http = require('http')
const { ApolloServer, gql } = require('apollo-server')

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000')
app.set('port', port)

/**
 * Create HTTP server.
 */

//var server = http.createServer(app)
// 1. GraphQL Schema 定義
const typeDefs = gql`
  type Query {
		me: User
		user(account: String!): User
		card(la: String!): Card
		card(en: String!): Card
		card(ch: String!): Card
		book(UserId: Int!, CardId: Int!): Book
  }

	type User {
		id: Int!
		name: String!
		account: String!
	}

	type Card {
		id: Int!
		ch: String!
		chExplain: String
		en: String!
		enExplain: String
		la: String!
		laExplain: String
		partOfSpeech: String!
	}

	type Book {
		UserId: Int!
		CardId: Int!
	}

	type Mutation {
    "新增Card"
    addCard(input: AddCardInput): Card
    "編輯Card"
    editCard(input: EditCardInput): Card
		"刪除Card"
		deleteCard(input: DeleteCardInput): Card
  }
`

const users = [
	{
		id: 1,
		name: 'Fong',
		account: 'user1',
		password: 12345678
	},
	{
		id: 2,
		name: 'Kevin',
		account: 'user2',
		password: 12345678
	},
	{
		id: 3,
		name: 'Mary',
		account: 'user3',
		password: 12345678
	}
]
const cards = [
	{
		id: 1,
		ch: '愛',
		en: 'love',
		la: 'amo',
		partOfSpeech: '動詞'
	},
	{
		id: 2,
		ch: '女孩',
		en: 'girl',
		la: 'puella',
		partOfSpeech: '名詞'
	},
	{
		id: 3,
		ch: '是',
		en: 'to be',
		la: 'est',
		partOfSpeech: '動詞'
	}
]
const books = [
	{
		id: 1,
		UserId: 1,
		CardId: 1
	},
	{
		id: 2,
		UserId: 2,
		CardId: 2
	},
	{
		id: 3,
		UserId: 3,
		CardId: 3
	}
]
const meId = 1

// helper functions
const filterCardsByUserId = userId => {
	const matched = books.filter(pair => userId === pair.UserId)
	const result = cards.filter(card => card.id === matched[0].CardId)
	return result
}
const findCardByChName = name => filterCardsByUserId.filter(card => card.ch === name)
const findCardByEnName = name => filterCardsByUserId.filter(card => card.en === name)
const findCardByLaName = name => filterCardsByUserId.filter(card => card.la === name)
const findUserByUserId = userId => users.find(user => user.id === Number(userId))

// 2. Resolvers 是一個會對照 Schema 中 field 的 function map ，讓你可以計算並回傳資料給 GraphQL Server
const resolvers = {
	Query: {
		// 需注意名稱一定要對到 Schema 中 field 的名稱
		hello: () => 'world',
		me: () => users[0],
		friends: () => users,
		user: (root, args, context) => {
			// 取出參數。因為 name 為 non-null 故一定會有值。
			const { name } = args
			return users.find(user => user.name === name)
		}
	},
	// Mutation Type Resolver
	Mutation: {
		// 需注意！args 打開後第一層為 input ，再進去一層才是 title, content
		addPost: (root, args, context) => {
			const { input } = args
			const { title, content } = input
			const newPost = {
				id: posts.length + 1,
				authorId: meId,
				title,
				content,
				likeGivers: []
			}
			posts.push(newPost)
			return newPost
		},
		likePost: (root, args, context) => {
			const { postId } = args
			const post = findPostById(postId)
			if (!post) throw new Error(`Post ${postId} Not Exists`)

			if (post.likeGiverIds.includes(meId)) {
				// 如果已經按過讚就收回
				const index = post.likeGiverIds.findIndex(v => v === userId)
				post.likeGiverIds.splice(index, 1)
			} else {
				// 否則就加入 likeGiverIds 名單
				post.likeGiverIds.push(meId)
			}
			return post
		}
	},
	User: {
		// 1. User.parent field resolver, 回傳屬於該 user 的 posts
		posts: (parent, args, context) => {
			// parent.id 為 userId
			return filterPostsByAuthorId(parent.id)
		}
	},
	// 2. Post type resolver
	Post: {
		// 2-1. parent 為 post 的資料，透過 post.likeGiverIds 連接到 users
		likeGivers: (parent, args, context) => {
			return parent.likeGiverIds.map(id => findUserById(id))
		},
		// 2-2. parent 為 post 的資料，透過 post.author
		author: (parent, args, context) => {
			return findUserById(parent.authorId)
		}
	}
}

// 3. 初始化 Web Server ，需傳入 typeDefs (Schema) 與 resolvers (Resolver)
const server = new ApolloServer({
	// Schema 部分
	typeDefs,
	// Resolver 部分
	resolvers
})

/**
 * Listen on provided port, on all network interfaces.
 */

// 4. 啟動 Server
server.listen().then(({ url }) => {
	console.log(`? Server ready at ${url}`)
})

// server.listen(port, () => {
// 	console.log(`Example app listening at http://localhost:${port}`)
// })
// server.on('error', onError)
// server.on('listening', onListening)

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort (val) {
	var port = parseInt(val, 10)

	if (isNaN(port)) {
		// named pipe
		return val
	}

	if (port >= 0) {
		// port number
		return port
	}

	return false
}

/**
 * Event listener for HTTP server "error" event.
 */

// function onError (error) {
// 	if (error.syscall !== 'listen') {
// 		throw error
// 	}

// 	var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port

// 	// handle specific listen errors with friendly messages
// 	switch (error.code) {
// 		case 'EACCES':
// 			console.error(bind + ' requires elevated privileges')
// 			process.exit(1)
// 			break
// 		case 'EADDRINUSE':
// 			console.error(bind + ' is already in use')
// 			process.exit(1)
// 			break
// 		default:
// 			throw error
// 	}
// }

/**
 * Event listener for HTTP server "listening" event.
 */

// function onListening () {
// 	var addr = server.address()
// 	var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port
// 	debug('Listening on ' + bind)
// }
