#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app')
// var debug = require('debug')('latincard:server')
// var http = require('http')
const { ApolloServer, gql, ForbiddenError } = require('apollo-server')
const jwt = require('jsonwebtoken')

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000')
app.set('port', port)

/**
 * Create HTTP server.
 */

//var server = http.createServer(app)
// 1. GraphQL Schema 定義
const typeDefs = gql`
  type Query {
		me(account: String): User
		books: [Book]
		card(id: Int, la: String, en: String, ch: String): Card

		"""
		find cards belong to user id
		"""
		cards: [Card]		
  }

	type User {
		id: Int!
		name: String!
		account: String!
		password: String!
	}

	type Card {
		id: Int!
		ch: String
		chExplain: String
		en: String
		enExplain: String
		la: String
		laExplain: String
		partOfSpeech: String
	}

	type Book {
		UserId: Int
		CardId: Int
		card: Card
	}

	type Token {
		token: String!
	}

	input PostCardInput{
		ch: String!
		en: String!
		la: String!
		partOfSpeech: String!
	}

	input EditCardInput{
		chOrigin: String!
		enOrigin: String!
		laOrigin: String!
		partOfSpeechOrigin: String!
		ch: String!
		en: String!
		la: String!
		partOfSpeech: String!
	}

	type Mutation {
		signUp(name: String, account: String, password: String): User
		login (account: String!, password: String!): Token
    "新增Card"
    postCard(input: PostCardInput!): Card
    "編輯Card"
    editCard(input: EditCardInput!): Card
		"刪除Card"
		deleteCard(id: Int!): [Card]
  }
`

const userController = require('../controllers/userControllers')
const cardController = require('../controllers/cardControllers')

// helper functions
const isAuthenticated = resolverFunc => (parent, args, context) => {
	if (!context.me) throw new ForbiddenError('請先登入')
	return resolverFunc.apply(null, [parent, args, context])
}

// 2. Resolvers 是一個會對照 Schema 中 field 的 function map ，讓你可以計算並回傳資料給 GraphQL Server
const resolvers = {
	Query: {
		// 需注意名稱一定要對到 Schema 中 field 的名稱
		me: isAuthenticated((parent, args, { me }) => userController.findUser(me.id)),
		// find cards belong to specific user by user id
		cards: isAuthenticated((root, args, { me }) => {
			return cardController.findCards(me)
		}),
		card: isAuthenticated((root, input, { me }) => {
			return cardController.findOneCard(input, me)
		}),
		// This is parent for Book.card
		books: (root, args, context) => {
			return cardController.findCardFromBook()
		}
	},
	Book: {
		// take cards from specific book data
		card: (parent, args, context) => {
			return cardController.findOneCard(parent, context)
		}
	},
	// Mutation Type Resolver
	Mutation: {
		// 需注意！args 打開後第一層為 input ，再進去一層才是 title, content
		signUp: async (parent, { name, account, password }, context) => {
			return userController.signUp(name, account, password)
		},
		login: async (root, { account, password }, context) => {
			return userController.signIn(account, password)
		},
		postCard: isAuthenticated((parent, { input }, { me }) => {
			return cardController.postCard(input, me.id)
		}),
		editCard: isAuthenticated((parent, { input }, { me }) => {
			return cardController.editCard(input)
		}),
		deleteCard: isAuthenticated((parent, { id }, { me }) => {
			return cardController.deleteCard(id, me)
		})
	}
}

// 3. 初始化 Web Server ，需傳入 typeDefs (Schema) 與 resolvers (Resolver)
const server = new ApolloServer({
	// Schema 部分
	typeDefs,
	// Resolver 部分
	resolvers,
	context: async ({ req }) => {
		// 1. 將 token 從 request header 的 jwt-token 取出
		const token = req.headers['jwt-token']
		if (token) {
			try {
				// 2. 檢查 token + 取得解析出的資料
				const me = await jwt.verify(token, process.env.JWT_SECRET)
				// 3. 放進 context
				return { me }
			} catch (e) {
				throw new Error('Your session expired. Sign in again.')
			}
		}
		// 如果沒有 token 就回傳空的 context 出去
		return {}
	}
})

/**
 * Listen on provided port, on all network interfaces.
 */

// 4. 啟動 Server
server.listen().then(({ url }) => {
	console.log(`? Server ready at ${url}`)
})

// server.listen(port, () => {
// 	console.log(`Example app listening at http://localhost:${port}`)
// })
// server.on('error', onError)
// server.on('listening', onListening)

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort (val) {
	var port = parseInt(val, 10)

	if (isNaN(port)) {
		// named pipe
		return val
	}

	if (port >= 0) {
		// port number
		return port
	}

	return false
}

/**
 * Event listener for HTTP server "error" event.
 */

// function onError (error) {
// 	if (error.syscall !== 'listen') {
// 		throw error
// 	}

// 	var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port

// 	// handle specific listen errors with friendly messages
// 	switch (error.code) {
// 		case 'EACCES':
// 			console.error(bind + ' requires elevated privileges')
// 			process.exit(1)
// 			break
// 		case 'EADDRINUSE':
// 			console.error(bind + ' is already in use')
// 			process.exit(1)
// 			break
// 		default:
// 			throw error
// 	}
// }

/**
 * Event listener for HTTP server "listening" event.
 */

// function onListening () {
// 	var addr = server.address()
// 	var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port
// 	debug('Listening on ' + bind)
// }
