#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app')
// var debug = require('debug')('latincard:server')
// var http = require('http')

const { ApolloServer } = require('apollo-server')
const { typeDefs, resolvers } = require('../schema')
const jwt = require('jsonwebtoken')

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || 4000)
app.set('port', port)

/**
 * Create HTTP server.
 */

//var server = http.createServer(app)

// 3. 初始化 Web Server ，需傳入 typeDefs (Schema) 與 resolvers (Resolver)
const server = new ApolloServer({
	// Schema 部分
	typeDefs,
	// Resolver 部分
	resolvers,
	context: async ({ req }) => {
		// 1. 將 token 從 request header 的 jwt-token 取出
		const token = req.headers['jwt-token']
		if (token) {
			try {
				// 2. 檢查 token + 取得解析出的資料
				const me = await jwt.verify(token, process.env.JWT_SECRET)
				// 3. 放進 context
				return { me, secret: process.env.JWT_SECRET }
			} catch (e) {
				throw new Error('Your session expired. Sign in again.')
			}
		}
		// 如果沒有 token 就回傳空的 context 出去
		return {}
	}
})

/**
 * Listen on provided port, on all network interfaces.
 */

// 4. 啟動 Server
server.listen({ port: process.env.PORT || 4000 }).then(({ url }) => {
	console.log(`? Server ready at ${url}`)
})

// server.listen(port, () => {
// 	console.log(`Example app listening at http://localhost:${port}`)
// })
// server.on('error', onError)
// server.on('listening', onListening)

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort (val) {
	var port = parseInt(val, 10)

	if (isNaN(port)) {
		// named pipe
		return val
	}

	if (port >= 0) {
		// port number
		return port
	}

	return false
}

/**
 * Event listener for HTTP server "error" event.
 */

// function onError (error) {
// 	if (error.syscall !== 'listen') {
// 		throw error
// 	}

// 	var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port

// 	// handle specific listen errors with friendly messages
// 	switch (error.code) {
// 		case 'EACCES':
// 			console.error(bind + ' requires elevated privileges')
// 			process.exit(1)
// 			break
// 		case 'EADDRINUSE':
// 			console.error(bind + ' is already in use')
// 			process.exit(1)
// 			break
// 		default:
// 			throw error
// 	}
// }

/**
 * Event listener for HTTP server "listening" event.
 */

// function onListening () {
// 	var addr = server.address()
// 	var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port
// 	debug('Listening on ' + bind)
// }
